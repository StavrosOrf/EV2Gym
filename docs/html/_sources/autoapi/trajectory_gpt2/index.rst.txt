:orphan:

:py:mod:`trajectory_gpt2`
=========================

.. py:module:: trajectory_gpt2

.. autoapi-nested-parse::

   PyTorch OpenAI GPT-2 model.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   trajectory_gpt2.Attention
   trajectory_gpt2.MLP
   trajectory_gpt2.AdapterMLP
   trajectory_gpt2.Block
   trajectory_gpt2.GPT2PreTrainedModel
   trajectory_gpt2.GPT2DoubleHeadsModelOutput
   trajectory_gpt2.GPT2Model



Functions
~~~~~~~~~

.. autoapisummary::

   trajectory_gpt2.load_tf_weights_in_gpt2



Attributes
~~~~~~~~~~

.. autoapisummary::

   trajectory_gpt2.logger
   trajectory_gpt2._CONFIG_FOR_DOC
   trajectory_gpt2._TOKENIZER_FOR_DOC
   trajectory_gpt2.GPT2_PRETRAINED_MODEL_ARCHIVE_LIST
   trajectory_gpt2.GPT2_START_DOCSTRING
   trajectory_gpt2.GPT2_INPUTS_DOCSTRING
   trajectory_gpt2.PARALLELIZE_DOCSTRING
   trajectory_gpt2.DEPARALLELIZE_DOCSTRING


.. py:data:: logger

   

.. py:data:: _CONFIG_FOR_DOC
   :value: 'GPT2Config'

   

.. py:data:: _TOKENIZER_FOR_DOC
   :value: 'GPT2Tokenizer'

   

.. py:data:: GPT2_PRETRAINED_MODEL_ARCHIVE_LIST
   :value: ['gpt2', 'gpt2-medium', 'gpt2-large', 'gpt2-xl', 'distilgpt2']

   

.. py:function:: load_tf_weights_in_gpt2(model, config, gpt2_checkpoint_path)

   Load tf checkpoints in a pytorch model


.. py:class:: Attention(nx, n_ctx, config, scale=False, is_cross_attention=False)


   Bases: :py:obj:`torch.nn.Module`

   .. py:method:: prune_heads(heads)


   .. py:method:: _attn(q, k, v, attention_mask=None, head_mask=None, output_attentions=False)


   .. py:method:: merge_heads(x)


   .. py:method:: split_heads(x, k=False)


   .. py:method:: forward(hidden_states, layer_past=None, attention_mask=None, head_mask=None, encoder_hidden_states=None, encoder_attention_mask=None, use_cache=False, output_attentions=False)



.. py:class:: MLP(n_state, config)


   Bases: :py:obj:`torch.nn.Module`

   .. py:method:: forward(x)



.. py:class:: AdapterMLP(n_state, config)


   Bases: :py:obj:`torch.nn.Module`

   .. py:method:: forward(x)



.. py:class:: Block(n_ctx, config, scale=False)


   Bases: :py:obj:`torch.nn.Module`

   .. py:method:: forward(hidden_states, layer_past=None, attention_mask=None, head_mask=None, encoder_hidden_states=None, encoder_attention_mask=None, use_cache=False, output_attentions=False)



.. py:class:: GPT2PreTrainedModel(*inputs, **kwargs)


   Bases: :py:obj:`transformers.modeling_utils.PreTrainedModel`

   An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
   models.

   .. py:attribute:: config_class

      

   .. py:attribute:: load_tf_weights

      

   .. py:attribute:: base_model_prefix
      :value: 'transformer'

      

   .. py:method:: _init_weights(module)

      Initialize the weights.



.. py:class:: GPT2DoubleHeadsModelOutput


   Bases: :py:obj:`transformers.file_utils.ModelOutput`

   Base class for outputs of models predicting if two sentences are consecutive or not.
   Args:
       loss (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, returned when ``labels`` is provided):
           Language modeling loss.
       mc_loss (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, returned when :obj:`mc_labels` is provided):
           Multiple choice classification loss.
       logits (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, num_choices, sequence_length, config.vocab_size)`):
           Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
       mc_logits (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, num_choices)`):
           Prediction scores of the multiple choice classification head (scores for each choice before SoftMax).
       past_key_values (:obj:`List[torch.FloatTensor]`, `optional`, returned when ``use_cache=True`` is passed or when ``config.use_cache=True``):
           List of :obj:`torch.FloatTensor` of length :obj:`config.n_layers`, with each tensor of shape :obj:`(2,
           batch_size, num_heads, sequence_length, embed_size_per_head)`).
           Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
           :obj:`past_key_values` input) to speed up sequential decoding.
       hidden_states (:obj:`tuple(torch.FloatTensor)`, `optional`, returned when ``output_hidden_states=True`` is passed or when ``config.output_hidden_states=True``):
           Tuple of :obj:`torch.FloatTensor` (one for the output of the embeddings + one for the output of each layer)
           of shape :obj:`(batch_size, sequence_length, hidden_size)`.
           Hidden-states of the model at the output of each layer plus the initial embedding outputs.
       attentions (:obj:`tuple(torch.FloatTensor)`, `optional`, returned when ``output_attentions=True`` is passed or when ``config.output_attentions=True``):
           Tuple of :obj:`torch.FloatTensor` (one for each layer) of shape :obj:`(batch_size, num_heads,
           sequence_length, sequence_length)`.
           Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
           heads.

   .. py:attribute:: loss
      :type: Optional[torch.FloatTensor]

      

   .. py:attribute:: mc_loss
      :type: Optional[torch.FloatTensor]

      

   .. py:attribute:: logits
      :type: torch.FloatTensor

      

   .. py:attribute:: mc_logits
      :type: torch.FloatTensor

      

   .. py:attribute:: past_key_values
      :type: Optional[List[torch.FloatTensor]]

      

   .. py:attribute:: hidden_states
      :type: Optional[Tuple[torch.FloatTensor]]

      

   .. py:attribute:: attentions
      :type: Optional[Tuple[torch.FloatTensor]]

      


.. py:data:: GPT2_START_DOCSTRING
   :value: Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: python

        """
            This model inherits from :class:`~transformers.PreTrainedModel`. Check the superclass documentation for the generic
            methods the library implements for all its model (such as downloading or saving, resizing the input embeddings,
            pruning heads etc.)
            This model is also a PyTorch `torch.nn.Module <https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`__
            subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to
            general usage and behavior.
            Parameters:
                config (:class:`~transformers.GPT2Config`): Model configuration class with all the parameters of the model.
                    Initializing with a config file does not load the weights associated with the model, only the
                    configuration. Check out the :meth:`~transformers.PreTrainedModel.from_pretrained` method to load the model
                    weights.
        """

    .. raw:: html

        </details>

   

.. py:data:: GPT2_INPUTS_DOCSTRING
   :value: Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: python

        """
            Args:
                input_ids (:obj:`torch.LongTensor` of shape :obj:`(batch_size, input_ids_length)`):
                    :obj:`input_ids_length` = ``sequence_length`` if :obj:`past_key_values` is ``None`` else
                    ``past_key_values[0].shape[-2]`` (``sequence_length`` of input past key value states). Indices of input
                    sequence tokens in the vocabulary.
                    If :obj:`past_key_values` is used, only ``input_ids`` that do not have their past calculated should be
                    passed as ``input_ids``.
                    Indices can be obtained using :class:`~transformers.GPT2Tokenizer`. See
                    :meth:`transformers.PreTrainedTokenizer.encode` and :meth:`transformers.PreTrainedTokenizer.__call__` for
                    details.
                    `What are input IDs? <../glossary.html#input-ids>`__
                past_key_values (:obj:`List[torch.FloatTensor]` of length :obj:`config.n_layers`):
                    Contains precomputed hidden-states (key and values in the attention blocks) as computed by the model (see
                    :obj:`past_key_values` output below). Can be used to speed up sequential decoding. The ``input_ids`` which
                    have their past given to this model should not be passed as ``input_ids`` as they have already been
                    computed.
                attention_mask (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, sequence_length)`, `optional`):
                    Mask to avoid performing attention on padding token indices. Mask values selected in ``[0, 1]``:
                    - 1 for tokens that are **not masked**,
                    - 0 for tokens that are **masked**.
                    `What are attention masks? <../glossary.html#attention-mask>`__
                token_type_ids (:obj:`torch.LongTensor` of shape :obj:`(batch_size, input_ids_length)`, `optional`):
                    Segment token indices to indicate first and second portions of the inputs. Indices are selected in ``[0,
                    1]``:
                    - 0 corresponds to a `sentence A` token,
                    - 1 corresponds to a `sentence B` token.
                    `What are token type IDs? <../glossary.html#token-type-ids>`_
                position_ids (:obj:`torch.LongTensor` of shape :obj:`(batch_size, sequence_length)`, `optional`):
                    Indices of positions of each input sequence tokens in the position embeddings. Selected in the range ``[0,
                    config.max_position_embeddings - 1]``.
                    `What are position IDs? <../glossary.html#position-ids>`_
                head_mask (:obj:`torch.FloatTensor` of shape :obj:`(num_heads,)` or :obj:`(num_layers, num_heads)`, `optional`):
                    Mask to nullify selected heads of the self-attention modules. Mask values selected in ``[0, 1]``:
                    - 1 indicates the head is **not masked**,
                    - 0 indicates the head is **masked**.
                inputs_embeds (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, sequence_length, hidden_size)`, `optional`):
                    Optionally, instead of passing :obj:`input_ids` you can choose to directly pass an embedded representation.
                    This is useful if you want more control over how to convert :obj:`input_ids` indices into associated
                    vectors than the model's internal embedding lookup matrix.
                    If :obj:`past_key_values` is used, optionally only the last :obj:`inputs_embeds` have to be input (see
                    :obj:`past_key_values`).
                use_cache (:obj:`bool`, `optional`):
                    If set to :obj:`True`, :obj:`past_key_values` key value states are returned and can be used to speed up
                    decoding (see :obj:`past_key_values`).
                output_attentions (:obj:`bool`, `optional`):
                    Whether or not to return the attentions tensors of all attention layers. See ``attentions`` under returned
                    tensors for more detail.
                output_hidden_states (:obj:`bool`, `optional`):
                    Whether or not to return the hidden states of all layers. See ``hidden_states`` under returned tensors for
                    more detail.
                return_dict (:obj:`bool`, `optional`):
                    Whether or not to return a :class:`~transformers.file_utils.ModelOutput` instead of a plain tuple.
        """

    .. raw:: html

        </details>

   

.. py:data:: PARALLELIZE_DOCSTRING
   :value: Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: python

        """
            Uses a device map to distribute attention modules of the model across several devices. If no device map is given,
            it will evenly distribute blocks across all devices.
            Args:
                device_map (:obj:`Dict[int, list]`, optional, defaults to None):
                    A dictionary that maps attention modules to devices. Note that the embedding module and LMHead are always
                    automatically mapped to the first device (for esoteric reasons). That means that the first device should
                    have fewer attention modules mapped to it than other devices. For reference, the gpt2 models have the
                    following number of attention modules:
                        - gpt2: 12
                        - gpt2-medium: 24
                        - gpt2-large: 36
                        - gpt2-xl: 48
            Example::
                    # Here is an example of a device map on a machine with 4 GPUs using gpt2-xl, which has a total of 48 attention modules:
                    model = GPT2LMHeadModel.from_pretrained('gpt2-xl')
                    device_map = {0: [0, 1, 2, 3, 4, 5, 6, 7, 8],
                                  1: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                                  2: [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34],
                                  3: [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]}
                    model.parallelize(device_map)
        """

    .. raw:: html

        </details>

   

.. py:data:: DEPARALLELIZE_DOCSTRING
   :value: Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: python

        """
            Moves the model to cpu from a model parallel state.
            Example::
                # On a 4 GPU machine with gpt2-large:
                model = GPT2LMHeadModel.from_pretrained('gpt2-large')
                device_map = {0: [0, 1, 2, 3, 4, 5, 6, 7],
                            1: [8, 9, 10, 11, 12, 13, 14, 15],
                            2: [16, 17, 18, 19, 20, 21, 22, 23],
                            3: [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]}
                model.parallelize(device_map) # Splits the model across several devices
                model.deparallelize() # Put the model back on cpu and cleans memory by calling torch.cuda.empty_cache()
        """

    .. raw:: html

        </details>

   

.. py:class:: GPT2Model(config)


   Bases: :py:obj:`GPT2PreTrainedModel`

   An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained
   models.

   .. py:method:: set_layers(num_layers)


   .. py:method:: parallelize(device_map=None)


   .. py:method:: deparallelize()


   .. py:method:: get_input_embeddings()


   .. py:method:: set_input_embeddings(new_embeddings)


   .. py:method:: _prune_heads(heads_to_prune)

      Prunes heads of the model. heads_to_prune: dict of {layer_num: list of heads to prune in this layer}


   .. py:method:: forward(input_ids=None, past_key_values=None, attention_mask=None, token_type_ids=None, position_ids=None, head_mask=None, inputs_embeds=None, encoder_hidden_states=None, encoder_attention_mask=None, use_cache=None, output_attentions=None, output_hidden_states=None, return_dict=None)



