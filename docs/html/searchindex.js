Search.setIndex({"docnames": ["autoapi/V2GProfitMax/index", "autoapi/act_trainer/index", "autoapi/decision_transformer/index", "autoapi/eMPC/index", "autoapi/ev2gym/baselines/DDPG/ddpg/index", "autoapi/ev2gym/baselines/DDPG/index", "autoapi/ev2gym/baselines/DDPG/nets/index", "autoapi/ev2gym/baselines/DDPG/noise/index", "autoapi/ev2gym/baselines/DDPG/replay_memory/index", "autoapi/ev2gym/baselines/DT/index", "autoapi/ev2gym/baselines/gurobi_models/index", "autoapi/ev2gym/baselines/gurobi_models/profit_max/index", "autoapi/ev2gym/baselines/gurobi_models/tracking_error/index", "autoapi/ev2gym/baselines/heuristics/index", "autoapi/ev2gym/baselines/index", "autoapi/ev2gym/models/ev/index", "autoapi/ev2gym/models/ev2gym_env/index", "autoapi/ev2gym/models/ev_charger/index", "autoapi/ev2gym/models/grid/index", "autoapi/ev2gym/models/index", "autoapi/ev2gym/models/replay/index", "autoapi/ev2gym/models/transformer/index", "autoapi/ev2gym/rl_agent/index", "autoapi/ev2gym/rl_agent/reward/index", "autoapi/ev2gym/rl_agent/state/index", "autoapi/ev2gym/utilities/arg_parser/index", "autoapi/ev2gym/utilities/index", "autoapi/ev2gym/utilities/loaders/index", "autoapi/ev2gym/utilities/utils/index", "autoapi/ev2gym/visuals/evaluator_plot/index", "autoapi/ev2gym/visuals/icons/index", "autoapi/ev2gym/visuals/index", "autoapi/ev2gym/visuals/plots/index", "autoapi/ev2gym/visuals/render/index", "autoapi/evaluate_episodes/index", "autoapi/index", "autoapi/mlp_bc/index", "autoapi/model/index", "autoapi/mpc/index", "autoapi/ocmf_mpc/index", "autoapi/seq_trainer/index", "autoapi/trainer/index", "autoapi/trajectory_gpt2/index", "index"], "filenames": ["autoapi/V2GProfitMax/index.rst", "autoapi/act_trainer/index.rst", "autoapi/decision_transformer/index.rst", "autoapi/eMPC/index.rst", "autoapi/ev2gym/baselines/DDPG/ddpg/index.rst", "autoapi/ev2gym/baselines/DDPG/index.rst", "autoapi/ev2gym/baselines/DDPG/nets/index.rst", "autoapi/ev2gym/baselines/DDPG/noise/index.rst", "autoapi/ev2gym/baselines/DDPG/replay_memory/index.rst", "autoapi/ev2gym/baselines/DT/index.rst", "autoapi/ev2gym/baselines/gurobi_models/index.rst", "autoapi/ev2gym/baselines/gurobi_models/profit_max/index.rst", "autoapi/ev2gym/baselines/gurobi_models/tracking_error/index.rst", "autoapi/ev2gym/baselines/heuristics/index.rst", "autoapi/ev2gym/baselines/index.rst", "autoapi/ev2gym/models/ev/index.rst", "autoapi/ev2gym/models/ev2gym_env/index.rst", "autoapi/ev2gym/models/ev_charger/index.rst", "autoapi/ev2gym/models/grid/index.rst", "autoapi/ev2gym/models/index.rst", "autoapi/ev2gym/models/replay/index.rst", "autoapi/ev2gym/models/transformer/index.rst", "autoapi/ev2gym/rl_agent/index.rst", "autoapi/ev2gym/rl_agent/reward/index.rst", "autoapi/ev2gym/rl_agent/state/index.rst", "autoapi/ev2gym/utilities/arg_parser/index.rst", "autoapi/ev2gym/utilities/index.rst", "autoapi/ev2gym/utilities/loaders/index.rst", "autoapi/ev2gym/utilities/utils/index.rst", "autoapi/ev2gym/visuals/evaluator_plot/index.rst", "autoapi/ev2gym/visuals/icons/index.rst", "autoapi/ev2gym/visuals/index.rst", "autoapi/ev2gym/visuals/plots/index.rst", "autoapi/ev2gym/visuals/render/index.rst", "autoapi/evaluate_episodes/index.rst", "autoapi/index.rst", "autoapi/mlp_bc/index.rst", "autoapi/model/index.rst", "autoapi/mpc/index.rst", "autoapi/ocmf_mpc/index.rst", "autoapi/seq_trainer/index.rst", "autoapi/trainer/index.rst", "autoapi/trajectory_gpt2/index.rst", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">V2GProfitMax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">act_trainer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decision_transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">eMPC</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.DDPG.ddpg</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.DDPG</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.DDPG.nets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.DDPG.noise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.DDPG.replay_memory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.DT</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.gurobi_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.gurobi_models.profit_max</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.gurobi_models.tracking_error</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines.heuristics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.baselines</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models.ev</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models.ev2gym_env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models.ev_charger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models.grid</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models.replay</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.models.transformer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.rl_agent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.rl_agent.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.rl_agent.state</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.utilities.arg_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.utilities</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.utilities.loaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.utilities.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.visuals.evaluator_plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.visuals.icons</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.visuals</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.visuals.plots</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ev2gym.visuals.render</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">evaluate_episodes</span></code>", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mlp_bc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mpc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ocmf_mpc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">seq_trainer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trainer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trajectory_gpt2</span></code>", "Welcome to ev2gym's documentation!"], "terms": {"index": 43, "modul": 43, "search": 43, "page": [35, 43], "squaredtrackingerrorreward": [16, 23], "env": [0, 3, 4, 11, 12, 13, 16, 20, 21, 23, 24, 27, 28, 32, 33, 34, 38, 39], "arg": [8, 23, 24, 42], "sqtrerror_trpenalty_userincent": 23, "_": [23, 29, 42], "user_satisfaction_list": [16, 23], "profitmax_trpenalty_userincent": 23, "total_cost": [16, 23], "squaredtrackingerrorrewardwithpenalti": 23, "simplereward": 23, "minimizetrackersurpluswithchargereward": 23, "profit_maxim": 23, "publicpst": [16, 24], "v2g_profit_max": 24, "v2g_profit_max_load": 24, "thi": [0, 2, 3, 4, 11, 12, 13, 15, 16, 20, 21, 24, 27, 28, 29, 35, 38, 39, 42], "i": [0, 3, 4, 11, 12, 13, 15, 16, 17, 20, 21, 24, 27, 29, 42], "v2gprofitmax": 24, "scenario": [24, 27, 28], "load": [4, 21, 24, 27, 38, 42], "businesspstwithmoreknowledg": 24, "us": [0, 2, 3, 4, 11, 12, 15, 16, 17, 20, 21, 24, 28, 29, 38, 39, 42], "busi": 24, "case": [18, 24], "requir": [24, 28], "more": [24, 42], "knowledg": 24, "soc": [15, 24, 28, 29], "time": [15, 24, 28], "departur": [15, 24], "each": [17, 24, 27, 29, 32, 42], "ev": [11, 12, 13, 17, 24, 27, 28, 29, 32], "present": 24, "contain": [0, 3, 11, 12, 13, 15, 16, 27, 35, 38, 39, 42], "auto": 35, "gener": [21, 27, 28, 35, 38, 42], "document": [35, 42], "1": [7, 11, 12, 15, 16, 34, 35, 36, 42], "creat": [0, 3, 4, 20, 27, 35, 38, 39], "sphinx": 35, "autoapi": 35, "api": 43, "refer": [42, 43], "rl_agent": 43, "reward": [2, 16, 36, 37, 43], "state": [2, 4, 7, 15, 16, 17, 18, 32, 36, 37, 38, 42, 43], "file": [0, 3, 4, 11, 12, 15, 16, 20, 21, 27, 29, 38, 39, 42], "citi": [16, 27], "environ": [0, 3, 11, 12, 15, 16, 21, 27, 28, 32, 33, 38], "load_ev_spawn_scenario": 27, "spawn": [27, 28], "simul": [11, 12, 15, 16, 17, 20, 27, 28, 32, 33], "return": [4, 7, 11, 12, 13, 15, 16, 17, 18, 21, 27, 28, 42], "type": [13, 15, 17, 21, 27, 28, 42], "none": [1, 2, 4, 6, 7, 11, 12, 13, 15, 16, 17, 21, 27, 28, 29, 34, 36, 37, 38, 40, 41, 42], "load_power_setpoint": 27, "power": [13, 15, 16, 17, 21, 27, 28, 29, 32, 38], "setpoint": [13, 27, 28, 29], "base": [0, 1, 2, 3, 4, 6, 7, 8, 13, 16, 27, 36, 37, 38, 39, 40, 42], "dai": [15, 27], "ahead": 27, "price": [17, 27], "numpi": [7, 13, 21, 27, 28], "ndarrai": [13, 27, 28], "generate_residential_inflexible_load": 27, "inflex": [21, 27], "transform": [17, 27, 32, 38, 42], "generate_pv_gener": 27, "pv": [21, 27, 38], "data": [16, 20, 27, 32, 38], "from": [4, 15, 17, 27, 28, 36, 42], "ad": [13, 17, 27], "minor": 27, "variat": 27, "load_transform": 27, "If": [4, 21, 27, 42], "load_from_replay_path": [16, 27], "ar": [13, 21, 27, 38, 42], "randomli": 27, "list": [13, 17, 27, 28, 42], "object": [4, 7, 8, 27], "model": [1, 2, 4, 27, 28, 34, 36, 38, 40, 41, 42], "load_ev_charger_profil": 27, "charger": [13, 15, 17, 27], "profil": 27, "ev_charger_profil": 27, "ev_charg": 27, "load_ev_profil": 27, "ev_profil": 27, "load_electricity_pric": 27, "electr": 27, "charge_pric": [17, 27], "matrix": [16, 27, 42], "size": [16, 27], "number": [13, 15, 17, 27, 42], "charg": [13, 15, 16, 17, 27, 28, 29, 32], "station": [15, 16, 27, 28, 32, 38], "length": [27, 42], "discharge_pric": [17, 27], "discharg": [15, 17, 27], "tupl": [15, 27, 42], "get_statist": 28, "dict": [28, 42], "print_statist": 28, "spawn_single_ev": 28, "cs_id": [21, 28], "port": [13, 16, 17, 28], "hour": 28, "minut": 28, "step": [4, 11, 12, 15, 16, 17, 18, 21, 28], "min_time_of_stay_step": 28, "singl": 28, "ev_spawn": 28, "all": [4, 13, 16, 28, 42], "current": [4, 11, 12, 13, 15, 16, 17, 21, 28, 32], "smooth_vector": 28, "v": [28, 29, 42], "median_smooth": 28, "window_s": 28, "generate_power_setpoint": 28, "entir": 28, "It": [13, 28, 29], "consid": [13, 28], "teh": [21, 28], "fulli": 28, "power_setpoint": 28, "np": [21, 28], "calculate_charge_power_potenti": 28, "calcul": [16, 28, 38, 42], "total": [17, 28, 32, 42], "potenti": 28, "park": [13, 28], "float": [15, 21, 28], "util": [6, 43], "empc": [0, 29], "which": [0, 3, 11, 12, 15, 16, 17, 42], "control": [0, 3, 21, 38, 42], "ev2gym": [0, 1, 2, 3, 36, 39, 40], "algorithm": [0, 3, 13, 21, 29], "author": [0, 3, 38, 39], "cesar": [0, 3, 38, 39], "diaz": [0, 3, 38, 39], "londono": [0, 3, 38, 39], "stavro": [0, 3, 38, 39], "orfanoudaki": [0, 3, 38, 39], "v2gprofitmaxoracl": 0, "verbos": [0, 3, 13, 16, 17, 18, 38, 39], "fals": [0, 3, 13, 15, 16, 17, 21, 38, 39, 41, 42], "kwarg": [0, 2, 3, 11, 12, 13, 16, 36, 37, 38, 39, 42], "baselin": [0, 1, 2, 3, 16, 36, 38, 39, 40], "mpc": [0, 3, 39], "helper": [0, 3, 38, 39], "provid": [0, 3, 17, 38, 39, 42], "standard": [0, 3, 16, 38, 39], "wai": [0, 3, 38, 39], "an": [0, 3, 16, 17, 21, 38, 39, 42], "abc": [0, 3, 38, 39], "inherit": [0, 3, 38, 39, 42], "algo_nam": [0, 11, 12, 13], "optim": [0, 1, 11, 12, 38, 40, 41], "offlin": [0, 11, 12], "get_act": [0, 2, 3, 11, 12, 13, 36, 37, 38, 39], "function": [0, 3, 11, 12, 13, 15, 16, 21, 38, 39], "comput": [0, 3, 4, 7, 39, 42], "action": [0, 2, 3, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 36, 37, 39], "econom": [0, 3, 39], "problem": [0, 3, 11, 12, 13, 38, 39], "includ": [0, 3, 39], "v2g": [0, 3, 11, 12, 29, 38, 39], "v2gprofitmaxloadsoracl": 0, "acttrain": 1, "batch_siz": [1, 8, 40, 41, 42], "get_batch": [1, 40, 41], "loss_fn": [1, 40, 41], "schedul": [1, 40, 41], "eval_fn": [1, 40, 41], "dt": [1, 2, 7, 14, 36, 40], "train": [1, 4, 40], "trainer": [1, 40], "train_step": [1, 40, 41], "decisiontransform": 2, "state_dim": [2, 34, 36, 37], "act_dim": [2, 34, 36, 37], "hidden_s": [2, 4, 6, 36, 42], "max_length": [2, 36, 37], "max_ep_len": [2, 34], "4096": 2, "action_tanh": 2, "true": [2, 16, 18, 21, 42], "trajectorymodel": [2, 36, 37], "gpt": [2, 42], "return_1": 2, "state_1": 2, "action_1": 2, "return_2": 2, "state_2": 2, "forward": [2, 6, 36, 37, 42], "returns_to_go": 2, "timestep": [2, 4, 15, 16, 17], "attention_mask": [2, 36, 37, 42], "empc_v2g": 3, "control_horizon": [3, 38, 39], "10": [3, 15, 34, 39, 42], "empc_g2v": 3, "implement": [3, 38, 39, 42], "g2v": [3, 29, 38, 39], "occf": [3, 29, 39], "logger": [4, 42], "devic": [4, 6, 34, 42], "soft_upd": 4, "target": 4, "sourc": 4, "tau": 4, "hard_upd": 4, "gamma": 4, "num_input": [4, 6], "action_spac": [4, 6], "checkpoint_dir": 4, "calc_act": 4, "action_nois": 4, "evalu": 4, "perform": [4, 42], "given": [4, 42], "argument": 4, "nois": 4, "appli": 4, "update_param": 4, "batch": 4, "updat": [4, 13, 15, 16, 17, 21, 38], "paramet": [4, 15, 42], "network": 4, "agent": 4, "accord": [4, 15, 17], "mean": [4, 42], "we": 4, "q": [4, 42], "critic": [4, 6], "one": [4, 16, 42], "gradient": 4, "descent": 4, "polici": [4, 7], "actor": [4, 6], "ascent": 4, "through": 4, "soft": 4, "save_checkpoint": 4, "last_timestep": 4, "replay_buff": 4, "run_nam": 4, "save": [4, 8, 16, 20, 42], "last": [4, 42], "befor": [4, 21, 42], "replai": [4, 16], "buffer": [4, 13], "get_path_of_latest_fil": 4, "latest": 4, "load_checkpoint": 4, "checkpoint_path": 4, "path": 4, "set_ev": 4, "set": [4, 16, 21, 38, 42], "mode": [4, 34], "set_train": 4, "get_network": 4, "name": 4, "weights_final_init": 6, "0": [6, 7, 15, 17, 34, 36, 38, 41, 42], "003": 6, "bias_final_init": 6, "0003": 6, "fan_in_uniform_init": 6, "tensor": [6, 42], "fan_in": 6, "initi": [6, 15, 16, 17, 42], "torch": [6, 37, 42], "nn": [6, 37, 42], "input": [6, 15, 16, 17, 42], "ounois": 7, "action_dimens": 7, "01": 7, "mu": 7, "theta": [7, 15], "15": [7, 42], "sigma": 7, "2": [7, 15, 17, 42], "reset": [7, 15, 16, 17, 21], "ornsteinuhlenbeckactionnois": 7, "x0": 7, "__repr__": 7, "repr": 7, "self": [7, 15, 17, 21, 42], "adaptiveparamnoisespec": 7, "initial_stddev": 7, "desired_action_stddev": 7, "adaptation_coeffici": 7, "adapt": [7, 15], "distanc": 7, "get_stat": 7, "ddpg_distance_metr": 7, "actions1": 7, "actions2": 7, "between": [7, 15], "taken": [7, 15, 17], "two": [7, 15, 42], "same": [7, 13, 29], "expect": 7, "arrai": [7, 21], "transit": 8, "replaymemori": 8, "capac": [8, 13, 15], "push": 8, "sampl": 8, "__len__": 8, "v2gprofitmaxoraclegb": 11, "replay_path": [11, 12], "ev_city_math_model": 11, "solv": [11, 12], "ev_citi": [11, 12, 21], "normal": [11, 12, 16, 21, 34], "powertrackingerrorrmin": 12, "roundrobin": 13, "round": 13, "robin": 13, "track": 13, "doe": [13, 42], "multipl": [13, 42], "transfom": 13, "constraint": [13, 16, 38], "And": 13, "assum": 13, "have": [13, 42], "get_env": 13, "update_ev_buff": 13, "remov": 13, "them": [13, 21], "chargeaslateasposs": 13, "As": [13, 29], "late": 13, "possibl": [13, 29], "int": [13, 42], "chargeasfastasposs": 13, "fast": [13, 29], "chargeasfastaspossibletodesiredcapac": 13, "To": 13, "desir": [13, 15], "up": [13, 42], "can": [13, 16, 17, 20, 42], "differ": [13, 29], "than": [13, 21, 42], "maximum": [13, 15], "batteri": [13, 15], "ddpg": 14, "gurobi_model": 14, "plot": 29, "comparatigv": 29, "result": 29, "marker_list": 29, "x": [21, 29, 42], "o": 29, "": [15, 17, 29, 36, 42], "p": 29, "h": 29, "d": 29, "color_list": 29, "00429d": 29, "5681b9": 29, "93c4d2": 29, "ffa59": 29, "dd4c65": 29, "93003a": 29, "b": [29, 42], "g": 29, "r": 29, "c": 29, "m": 29, "y": 29, "k": [15, 29, 42], "algorithm_nam": 29, "plot_total_pow": 29, "results_path": 29, "save_path": 29, "plot_total_power_v2g": 29, "plot_comparable_ev_soc": 29, "plot_comparable_ev_soc_singl": 29, "plot_comparable_cs_pow": 29, "plot_actual_power_vs_setpoint": 29, "actual": [15, 29], "behavior": [29, 42], "subplot": 29, "vertic": 29, "plot_pric": 29, "icon": [31, 33], "visualize_step": 32, "render": [16, 32], "termin": 32, "ev_city_plot": 32, "The": [15, 16, 20, 21, 32, 42], "energi": [17, 32], "level": 32, "cpo": 32, "1000": 34, "cuda": [34, 42], "target_return": [34, 36], "state_mean": 34, "state_std": 34, "evaluate_episode_rtg": 34, "exp_prefix": 34, "scale": [34, 42], "n_test_episod": 34, "config_fil": [16, 34], "config": [34, 42], "yaml": 34, "mlpbcmodel": 36, "n_layer": [36, 42], "dropout": 36, "simpl": [36, 42], "mlp": [36, 42], "predict": [36, 42], "next": [16, 21, 36, 38], "past": [36, 42], "mask": [37, 42], "profit": [17, 38], "flexibl": 38, "maxim": [15, 38], "25": [38, 42], "time_limit": 38, "200": 38, "output_flag": 38, "mipgap": 38, "abstract": [38, 42], "update_tr_pow": 38, "t": 38, "limit": [21, 38], "horizon": [21, 38], "forecast": [21, 38], "update_tr_power_oracl": 38, "reconstruct_st": 38, "reconstruct": 38, "histor": 38, "calculate_xf_g2v": 38, "calculate_xf_v2g": 38, "v2g_station_model": 38, "build": 38, "g2v_station_model": 38, "calculate_inequalityconstraint": 38, "inequ": 38, "au": 38, "bu": [17, 38], "set_power_limits_v2g": 38, "set_power_limits_g2v": 38, "print_info": 38, "print": [17, 38], "inform": [17, 38], "ocmf_v2g": 39, "ocmf_g2v": 39, "sequencetrain": 40, "train_iter": 41, "num_step": 41, "iter_num": 41, "print_log": 41, "pytorch": 42, "openai": [16, 42], "_config_for_doc": 42, "gpt2config": 42, "_tokenizer_for_doc": 42, "gpt2token": 42, "gpt2_pretrained_model_archive_list": 42, "gpt2": 42, "medium": 42, "larg": 42, "xl": 42, "distilgpt2": 42, "load_tf_weights_in_gpt2": 42, "gpt2_checkpoint_path": 42, "tf": 42, "checkpoint": 42, "attent": 42, "nx": 42, "n_ctx": 42, "is_cross_attent": 42, "prune_head": 42, "head": 42, "_attn": 42, "head_mask": 42, "output_attent": 42, "merge_head": 42, "split_head": 42, "hidden_st": 42, "layer_past": 42, "encoder_hidden_st": 42, "encoder_attention_mask": 42, "use_cach": 42, "n_state": 42, "adaptermlp": 42, "block": 42, "gpt2pretrainedmodel": 42, "modeling_util": 42, "pretrainedmodel": 42, "handl": 42, "weight": 42, "interfac": 42, "download": 42, "pretrain": 42, "config_class": 42, "load_tf_weight": 42, "base_model_prefix": 42, "_init_weight": 42, "gpt2doubleheadsmodeloutput": 42, "file_util": 42, "modeloutput": 42, "output": [15, 17, 42], "sentenc": 42, "consecut": 42, "loss": [15, 42], "floattensor": 42, "shape": 42, "option": [16, 42], "when": [15, 42], "label": 42, "languag": 42, "mc_loss": 42, "mc_label": 42, "choic": 42, "classif": 42, "logit": 42, "num_choic": 42, "sequence_length": 42, "vocab_s": 42, "score": [15, 42], "vocabulari": 42, "token": 42, "softmax": 42, "mc_logit": 42, "past_key_valu": 42, "pass": 42, "num_head": 42, "embed_size_per_head": 42, "pre": 42, "hidden": 42, "kei": 42, "valu": [15, 16, 17, 21, 42], "see": 42, "speed": [15, 17, 42], "sequenti": 42, "decod": 42, "output_hidden_st": 42, "embed": 42, "layer": 42, "plu": 42, "after": 42, "averag": 42, "gpt2_start_docstr": 42, "multilin": 42, "string": 42, "show": 42, "check": [16, 21, 42], "superclass": 42, "method": [15, 17, 42], "librari": 42, "its": [16, 42], "resiz": 42, "prune": 42, "etc": 42, "also": [16, 42], "http": [15, 42], "org": 42, "doc": 42, "stabl": 42, "html": 42, "__": 42, "subclass": 42, "regular": 42, "matter": 42, "relat": 42, "usag": 42, "configur": [21, 42], "associ": 42, "onli": 42, "out": 42, "meth": 42, "from_pretrain": 42, "gpt2_inputs_docstr": 42, "input_id": 42, "obj": 42, "longtensor": 42, "input_ids_length": 42, "els": [15, 42], "indic": [16, 42], "sequenc": 42, "do": 42, "should": 42, "obtain": 42, "pretrainedtoken": 42, "encod": 42, "__call__": 42, "detail": 42, "what": 42, "id": [15, 17, 21, 42], "glossari": 42, "precomput": 42, "below": 42, "thei": 42, "alreadi": 42, "been": 42, "avoid": 42, "pad": 42, "select": 42, "token_type_id": 42, "segment": 42, "first": 42, "second": 42, "portion": 42, "correspond": 42, "A": [15, 42], "position_id": 42, "posit": [15, 17, 42], "rang": 42, "max_position_embed": 42, "num_lay": 42, "nullifi": 42, "inputs_emb": 42, "instead": 42, "you": 42, "choos": 42, "directli": 42, "represent": 42, "want": 42, "over": 42, "how": [21, 42], "convert": 42, "vector": [16, 42], "intern": 42, "lookup": 42, "bool": [21, 42], "whether": [15, 16, 17, 42], "under": 42, "return_dict": 42, "plain": 42, "parallelize_docstr": 42, "map": 42, "distribut": 42, "across": 42, "sever": 42, "evenli": 42, "device_map": 42, "default": [17, 18, 42], "dictionari": 42, "note": 42, "lmhead": 42, "alwai": 42, "automat": 42, "esoter": 42, "reason": 42, "That": 42, "fewer": 42, "other": 42, "For": 42, "follow": 42, "12": 42, "24": 42, "36": 42, "48": 42, "exampl": 42, "here": 42, "machin": 42, "4": 42, "gpu": 42, "ha": 42, "gpt2lmheadmodel": 42, "3": [15, 17, 42], "5": [15, 17, 42], "6": 42, "7": 42, "8": [15, 42], "9": [18, 42], "11": 42, "13": 42, "14": 42, "16": 42, "17": 42, "18": 42, "19": 42, "20": 42, "21": 42, "22": [15, 42], "23": 42, "26": 42, "27": 42, "28": 42, "29": 42, "30": 42, "31": 42, "32": 42, "33": 42, "34": 42, "35": 42, "37": 42, "38": 42, "39": 42, "40": 42, "41": 42, "42": 42, "43": 42, "44": 42, "45": 42, "46": 42, "47": 42, "parallel": 42, "deparallelize_docstr": 42, "move": 42, "cpu": 42, "On": 42, "split": 42, "deparallel": 42, "put": 42, "back": 42, "clean": 42, "memori": 42, "call": 42, "empty_cach": 42, "gpt2model": 42, "set_lay": 42, "get_input_embed": 42, "set_input_embed": 42, "new_embed": 42, "_prune_head": 42, "heads_to_prun": 42, "layer_num": 42, "locat": [15, 17], "battery_capacity_at_arriv": 15, "time_of_arriv": 15, "time_of_departur": 15, "desired_capac": 15, "battery_capac": 15, "50": 15, "min_battery_capac": 15, "max_ac_charge_pow": 15, "min_ac_charge_pow": 15, "max_dc_charge_pow": 15, "max_discharge_pow": 15, "min_discharge_pow": 15, "ev_phas": 15, "transition_soc": 15, "charge_effici": 15, "discharge_effici": 15, "timescal": [15, 17], "repres": [15, 16], "stage": 15, "wa": 15, "github": 15, "com": 15, "zach401": 15, "acnport": 15, "blob": 15, "master": 15, "acnsim": 15, "py": 15, "l186": 15, "attribut": [15, 17], "uniqu": [15, 17], "identifi": [15, 17], "uniquep": 15, "per": [15, 17], "arriv": 15, "kwh": [15, 17], "earliest": 15, "use_probabilistic_time_of_departur": 15, "equal": 15, "probabilist": 15, "min_desired_capac": 15, "minimum": 15, "life": 15, "max_desired_capac": 15, "effici": 15, "determin": [15, 17], "statu": [15, 17], "variabl": [15, 17], "current_capac": 15, "current_energi": 15, "kw": 15, "neg": [15, 17], "charging_cycl": 15, "cycl": 15, "previous_pow": 15, "previou": 15, "_charg": 15, "_discharg": 15, "amp": [15, 21], "voltag": [15, 17], "phase": [15, 17], "ac": [15, 17], "actual_cur": 15, "my_ceil": 15, "precis": 15, "is_depart": 15, "depart": 15, "user": [15, 17], "satisfact": [15, 17], "union": 15, "get_user_satisfact": 15, "get_soc": 15, "__str__": [15, 17, 21], "str": [15, 17, 21], "becaus": 15, "get_battery_degrad": 15, "qacc": 15, "accumul": 15, "cell": 15, "throughput": 15, "ah": 15, "qsim": 15, "dure": 15, "tacc": 15, "ag": 15, "tsim": 15, "temperatur": 15, "evciti": 16, "gym": 16, "standalon": 16, "without": 16, "replay_save_path": 16, "generate_rnd_gam": 16, "seed": [16, 18], "save_replai": 16, "save_plot": 16, "state_funct": 16, "reward_funct": 16, "eval_mod": 16, "lightweight_plot": 16, "empty_ports_at_end_of_simul": 16, "extra_sim_nam": 16, "render_mod": 16, "gymnasium": 16, "init_statistic_vari": 16, "visual": 16, "take": 16, "episod": 16, "done": 16, "sum": 16, "observ": 16, "complet": 16, "space": 16, "scalar": 16, "boolean": 16, "_check_termin": 16, "ani": 16, "violat": 16, "_save_sim_replai": 16, "pickl": [16, 20], "_update_power_statist": 16, "departing_ev": 16, "statist": [16, 17], "_step_dat": 16, "date": 16, "_get_observ": 16, "set_reward_funct": 16, "_calculate_reward": 16, "invalid_action_punish": 16, "connected_bu": 17, "connected_transform": 17, "geo_loc": 17, "min_charge_curr": 17, "max_charge_curr": 17, "56": 17, "min_discharge_curr": 17, "max_discharge_curr": 17, "230": 17, "n_port": 17, "charger_typ": 17, "connect": 17, "geograph": 17, "typ1": 17, "type2": 17, "dc": 17, "bi_direct": 17, "grid": 17, "about": 17, "current_power_output": 17, "drain": 17, "evs_connect": 17, "n_ev_connect": 17, "current_step": 17, "total_energy_charg": 17, "total_energy_discharg": 17, "total_profit": 17, "total_evs_serv": 17, "serv": 17, "total_user_satisfact": 17, "format": 17, "zer": 17, "cost": 17, "user_satisfact": 17, "get_max_pow": 17, "get_min_charge_pow": 17, "get_min_pow": 17, "get_avg_user_satisfact": 17, "spawn_ev": 17, "add": 17, "charging_st": 18, "_get_grid_act": 18, "get_grid_st": 18, "todo": 18, "get_charging_stations_bus": 18, "get_bus_transform": 18, "visualize_pf": 18, "get_overloaded_lin": 18, "get_overloaded_trafo": 18, "evcityreplai": 20, "math": 20, "max_pow": 21, "100": 21, "inflexible_load": 21, "zero": 21, "96": 21, "solar_pow": 21, "simulation_length": 21, "generate_demand_response_ev": 21, "demand": 21, "respons": 21, "event": 21, "get_power_limit": 21, "get": 21, "happen": 21, "accordingli": 21, "awar": 21, "get_load_pv_forecast": 21, "normalize_pv_gener": 21, "generate_pv_generation_forecast": 21, "normalize_inflexible_load": 21, "infelxible_load": 21, "lower": 21, "generate_inflexible_loads_forecast": 21, "is_overload": 21, "overload": 21, "get_how_overload": 21}, "objects": {"": [[0, 0, 0, "-", "V2GProfitMax"], [1, 0, 0, "-", "act_trainer"], [2, 0, 0, "-", "decision_transformer"], [3, 0, 0, "-", "eMPC"], [34, 0, 0, "-", "evaluate_episodes"], [36, 0, 0, "-", "mlp_bc"], [37, 0, 0, "-", "model"], [38, 0, 0, "-", "mpc"], [39, 0, 0, "-", "ocmf_mpc"], [40, 0, 0, "-", "seq_trainer"], [41, 0, 0, "-", "trainer"], [42, 0, 0, "-", "trajectory_gpt2"]], "V2GProfitMax": [[0, 1, 1, "", "V2GProfitMaxLoadsOracle"], [0, 1, 1, "", "V2GProfitMaxOracle"]], "V2GProfitMax.V2GProfitMaxLoadsOracle": [[0, 2, 1, "", "algo_name"], [0, 3, 1, "", "get_action"]], "V2GProfitMax.V2GProfitMaxOracle": [[0, 2, 1, "", "algo_name"], [0, 3, 1, "", "get_action"]], "act_trainer": [[1, 1, 1, "", "ActTrainer"]], "act_trainer.ActTrainer": [[1, 3, 1, "", "train_step"]], "decision_transformer": [[2, 1, 1, "", "DecisionTransformer"]], "decision_transformer.DecisionTransformer": [[2, 3, 1, "", "forward"], [2, 3, 1, "", "get_action"]], "eMPC": [[3, 1, 1, "", "eMPC_G2V"], [3, 1, 1, "", "eMPC_V2G"]], "eMPC.eMPC_G2V": [[3, 3, 1, "", "get_action"]], "eMPC.eMPC_V2G": [[3, 3, 1, "", "get_action"]], "ev2gym": [[14, 0, 0, "-", "baselines"], [19, 0, 0, "-", "models"], [22, 0, 0, "-", "rl_agent"], [26, 0, 0, "-", "utilities"], [31, 0, 0, "-", "visuals"]], "ev2gym.baselines": [[5, 0, 0, "-", "DDPG"], [9, 0, 0, "-", "DT"], [10, 0, 0, "-", "gurobi_models"], [13, 0, 0, "-", "heuristics"]], "ev2gym.baselines.DDPG": [[4, 0, 0, "-", "ddpg"], [6, 0, 0, "-", "nets"], [7, 0, 0, "-", "noise"], [8, 0, 0, "-", "replay_memory"]], "ev2gym.baselines.DDPG.ddpg": [[4, 1, 1, "", "DDPG"], [4, 4, 1, "", "device"], [4, 5, 1, "", "hard_update"], [4, 4, 1, "", "logger"], [4, 5, 1, "", "soft_update"]], "ev2gym.baselines.DDPG.ddpg.DDPG": [[4, 3, 1, "", "calc_action"], [4, 3, 1, "", "get_network"], [4, 3, 1, "", "get_path_of_latest_file"], [4, 3, 1, "", "load_checkpoint"], [4, 3, 1, "", "save_checkpoint"], [4, 3, 1, "", "set_eval"], [4, 3, 1, "", "set_train"], [4, 3, 1, "", "update_params"]], "ev2gym.baselines.DDPG.nets": [[6, 1, 1, "", "Actor"], [6, 4, 1, "", "BIAS_FINAL_INIT"], [6, 1, 1, "", "Critic"], [6, 4, 1, "", "WEIGHTS_FINAL_INIT"], [6, 4, 1, "", "device"], [6, 5, 1, "", "fan_in_uniform_init"]], "ev2gym.baselines.DDPG.nets.Actor": [[6, 3, 1, "", "forward"]], "ev2gym.baselines.DDPG.nets.Critic": [[6, 3, 1, "", "forward"]], "ev2gym.baselines.DDPG.noise": [[7, 1, 1, "", "AdaptiveParamNoiseSpec"], [7, 1, 1, "", "OUNoise"], [7, 1, 1, "", "OrnsteinUhlenbeckActionNoise"], [7, 5, 1, "", "ddpg_distance_metric"]], "ev2gym.baselines.DDPG.noise.AdaptiveParamNoiseSpec": [[7, 3, 1, "", "__repr__"], [7, 3, 1, "", "adapt"], [7, 3, 1, "", "get_stats"]], "ev2gym.baselines.DDPG.noise.OUNoise": [[7, 3, 1, "", "noise"], [7, 3, 1, "", "reset"]], "ev2gym.baselines.DDPG.noise.OrnsteinUhlenbeckActionNoise": [[7, 3, 1, "", "__repr__"], [7, 3, 1, "", "noise"], [7, 3, 1, "", "reset"]], "ev2gym.baselines.DDPG.replay_memory": [[8, 1, 1, "", "ReplayMemory"], [8, 4, 1, "", "Transition"]], "ev2gym.baselines.DDPG.replay_memory.ReplayMemory": [[8, 3, 1, "", "__len__"], [8, 3, 1, "", "push"], [8, 3, 1, "", "sample"]], "ev2gym.baselines.gurobi_models": [[11, 0, 0, "-", "profit_max"], [12, 0, 0, "-", "tracking_error"]], "ev2gym.baselines.gurobi_models.profit_max": [[11, 1, 1, "", "V2GProfitMaxOracleGB"]], "ev2gym.baselines.gurobi_models.profit_max.V2GProfitMaxOracleGB": [[11, 2, 1, "", "algo_name"], [11, 3, 1, "", "get_action"], [11, 3, 1, "", "get_actions"]], "ev2gym.baselines.gurobi_models.tracking_error": [[12, 1, 1, "", "PowerTrackingErrorrMin"]], "ev2gym.baselines.gurobi_models.tracking_error.PowerTrackingErrorrMin": [[12, 2, 1, "", "algo_name"], [12, 3, 1, "", "get_action"], [12, 3, 1, "", "get_actions"]], "ev2gym.baselines.heuristics": [[13, 1, 1, "", "ChargeAsFastAsPossible"], [13, 1, 1, "", "ChargeAsFastAsPossibleToDesiredCapacity"], [13, 1, 1, "", "ChargeAsLateAsPossible"], [13, 1, 1, "", "RoundRobin"]], "ev2gym.baselines.heuristics.ChargeAsFastAsPossible": [[13, 2, 1, "", "algo_name"], [13, 3, 1, "", "get_action"]], "ev2gym.baselines.heuristics.ChargeAsFastAsPossibleToDesiredCapacity": [[13, 2, 1, "", "algo_name"], [13, 3, 1, "", "get_action"]], "ev2gym.baselines.heuristics.ChargeAsLateAsPossible": [[13, 2, 1, "", "algo_name"], [13, 3, 1, "", "get_action"], [13, 3, 1, "", "update_ev_buffer"]], "ev2gym.baselines.heuristics.RoundRobin": [[13, 2, 1, "", "algo_name"], [13, 3, 1, "", "get_action"], [13, 3, 1, "", "get_env"], [13, 3, 1, "", "update_ev_buffer"]], "ev2gym.models": [[15, 0, 0, "-", "ev"], [16, 0, 0, "-", "ev2gym_env"], [17, 0, 0, "-", "ev_charger"], [18, 0, 0, "-", "grid"], [20, 0, 0, "-", "replay"], [21, 0, 0, "-", "transformer"]], "ev2gym.models.ev": [[15, 1, 1, "", "EV"]], "ev2gym.models.ev.EV": [[15, 3, 1, "", "__str__"], [15, 3, 1, "", "_charge"], [15, 3, 1, "", "_discharge"], [15, 3, 1, "", "get_battery_degradation"], [15, 3, 1, "", "get_soc"], [15, 3, 1, "", "get_user_satisfaction"], [15, 3, 1, "", "is_departing"], [15, 3, 1, "", "my_ceil"], [15, 3, 1, "", "reset"], [15, 3, 1, "", "step"]], "ev2gym.models.ev2gym_env": [[16, 1, 1, "", "EV2Gym"]], "ev2gym.models.ev2gym_env.EV2Gym": [[16, 3, 1, "", "_calculate_reward"], [16, 3, 1, "", "_check_termination"], [16, 3, 1, "", "_get_observation"], [16, 3, 1, "", "_save_sim_replay"], [16, 3, 1, "", "_step_date"], [16, 3, 1, "", "_update_power_statistics"], [16, 3, 1, "", "init_statistic_variables"], [16, 3, 1, "", "render"], [16, 3, 1, "", "reset"], [16, 3, 1, "", "set_reward_function"], [16, 3, 1, "", "step"]], "ev2gym.models.ev_charger": [[17, 1, 1, "", "EV_Charger"]], "ev2gym.models.ev_charger.EV_Charger": [[17, 3, 1, "", "__str__"], [17, 3, 1, "", "get_avg_user_satisfaction"], [17, 3, 1, "", "get_max_power"], [17, 3, 1, "", "get_min_charge_power"], [17, 3, 1, "", "get_min_power"], [17, 3, 1, "", "reset"], [17, 3, 1, "", "spawn_ev"], [17, 3, 1, "", "step"]], "ev2gym.models.grid": [[18, 1, 1, "", "Grid"], [18, 4, 1, "", "grid"]], "ev2gym.models.grid.Grid": [[18, 3, 1, "", "_get_grid_actions"], [18, 3, 1, "", "get_bus_transformers"], [18, 3, 1, "", "get_charging_stations_buses"], [18, 3, 1, "", "get_grid_state"], [18, 3, 1, "", "get_overloaded_lines"], [18, 3, 1, "", "get_overloaded_trafos"], [18, 3, 1, "", "step"], [18, 3, 1, "", "visualize_pf"]], "ev2gym.models.replay": [[20, 1, 1, "", "EvCityReplay"]], "ev2gym.models.transformer": [[21, 1, 1, "", "Transformer"]], "ev2gym.models.transformer.Transformer": [[21, 3, 1, "", "__str__"], [21, 3, 1, "", "generate_demand_response_events"], [21, 3, 1, "", "generate_inflexible_loads_forecast"], [21, 3, 1, "", "generate_pv_generation_forecast"], [21, 3, 1, "", "get_how_overloaded"], [21, 3, 1, "", "get_load_pv_forecast"], [21, 3, 1, "", "get_power_limits"], [21, 3, 1, "", "is_overloaded"], [21, 3, 1, "", "normalize_inflexible_loads"], [21, 3, 1, "", "normalize_pv_generation"], [21, 3, 1, "", "reset"], [21, 3, 1, "", "step"]], "ev2gym.rl_agent": [[23, 0, 0, "-", "reward"], [24, 0, 0, "-", "state"]], "ev2gym.rl_agent.reward": [[23, 5, 1, "", "MinimizeTrackerSurplusWithChargeRewards"], [23, 5, 1, "", "ProfitMax_TrPenalty_UserIncentives"], [23, 5, 1, "", "SimpleReward"], [23, 5, 1, "", "SqTrError_TrPenalty_UserIncentives"], [23, 5, 1, "", "SquaredTrackingErrorReward"], [23, 5, 1, "", "SquaredTrackingErrorRewardWithPenalty"], [23, 5, 1, "", "profit_maximization"]], "ev2gym.rl_agent.state": [[24, 5, 1, "", "BusinessPSTwithMoreKnowledge"], [24, 5, 1, "", "PublicPST"], [24, 5, 1, "", "V2G_profit_max"], [24, 5, 1, "", "V2G_profit_max_loads"]], "ev2gym.utilities": [[25, 0, 0, "-", "arg_parser"], [27, 0, 0, "-", "loaders"], [28, 0, 0, "-", "utils"]], "ev2gym.utilities.arg_parser": [[25, 5, 1, "", "arg_parser"]], "ev2gym.utilities.loaders": [[27, 5, 1, "", "generate_pv_generation"], [27, 5, 1, "", "generate_residential_inflexible_loads"], [27, 5, 1, "", "load_electricity_prices"], [27, 5, 1, "", "load_ev_charger_profiles"], [27, 5, 1, "", "load_ev_profiles"], [27, 5, 1, "", "load_ev_spawn_scenarios"], [27, 5, 1, "", "load_power_setpoints"], [27, 5, 1, "", "load_transformers"]], "ev2gym.utilities.utils": [[28, 5, 1, "", "EV_spawner"], [28, 5, 1, "", "calculate_charge_power_potential"], [28, 5, 1, "", "generate_power_setpoints"], [28, 5, 1, "", "get_statistics"], [28, 5, 1, "", "median_smoothing"], [28, 5, 1, "", "print_statistics"], [28, 5, 1, "", "smooth_vector"], [28, 5, 1, "", "spawn_single_EV"]], "ev2gym.visuals": [[29, 0, 0, "-", "evaluator_plot"], [30, 0, 0, "-", "icons"], [32, 0, 0, "-", "plots"], [33, 0, 0, "-", "render"]], "ev2gym.visuals.evaluator_plot": [[29, 4, 1, "", "algorithm_names"], [29, 4, 1, "", "color_list"], [29, 4, 1, "", "marker_list"], [29, 5, 1, "", "plot_actual_power_vs_setpoint"], [29, 5, 1, "", "plot_comparable_CS_Power"], [29, 5, 1, "", "plot_comparable_EV_SoC"], [29, 5, 1, "", "plot_comparable_EV_SoC_single"], [29, 5, 1, "", "plot_prices"], [29, 5, 1, "", "plot_total_power"], [29, 5, 1, "", "plot_total_power_V2G"]], "ev2gym.visuals.plots": [[32, 5, 1, "", "ev_city_plot"], [32, 5, 1, "", "visualize_step"]], "ev2gym.visuals.render": [[33, 1, 1, "", "Renderer"], [33, 4, 1, "", "icons"]], "ev2gym.visuals.render.Renderer": [[33, 3, 1, "", "render"]], "evaluate_episodes": [[34, 5, 1, "", "evaluate_episode"], [34, 5, 1, "", "evaluate_episode_rtg"]], "mlp_bc": [[36, 1, 1, "", "MLPBCModel"]], "mlp_bc.MLPBCModel": [[36, 3, 1, "", "forward"], [36, 3, 1, "", "get_action"]], "model": [[37, 1, 1, "", "TrajectoryModel"]], "model.TrajectoryModel": [[37, 3, 1, "", "forward"], [37, 3, 1, "", "get_action"]], "mpc": [[38, 1, 1, "", "MPC"]], "mpc.MPC": [[38, 3, 1, "", "calculate_InequalityConstraints"], [38, 3, 1, "", "calculate_XF_G2V"], [38, 3, 1, "", "calculate_XF_V2G"], [38, 3, 1, "", "g2v_station_models"], [38, 3, 1, "", "get_action"], [38, 3, 1, "", "print_info"], [38, 3, 1, "", "reconstruct_state"], [38, 3, 1, "", "set_power_limits_G2V"], [38, 3, 1, "", "set_power_limits_V2G"], [38, 3, 1, "", "update_tr_power"], [38, 3, 1, "", "update_tr_power_oracle"], [38, 3, 1, "", "v2g_station_models"]], "ocmf_mpc": [[39, 1, 1, "", "OCMF_G2V"], [39, 1, 1, "", "OCMF_V2G"]], "ocmf_mpc.OCMF_G2V": [[39, 3, 1, "", "get_action"]], "ocmf_mpc.OCMF_V2G": [[39, 3, 1, "", "get_action"]], "seq_trainer": [[40, 1, 1, "", "SequenceTrainer"]], "seq_trainer.SequenceTrainer": [[40, 3, 1, "", "train_step"]], "trainer": [[41, 1, 1, "", "Trainer"]], "trainer.Trainer": [[41, 3, 1, "", "train_iteration"], [41, 3, 1, "", "train_step"]], "trajectory_gpt2": [[42, 1, 1, "", "AdapterMLP"], [42, 1, 1, "", "Attention"], [42, 1, 1, "", "Block"], [42, 4, 1, "", "DEPARALLELIZE_DOCSTRING"], [42, 1, 1, "", "GPT2DoubleHeadsModelOutput"], [42, 1, 1, "", "GPT2Model"], [42, 1, 1, "", "GPT2PreTrainedModel"], [42, 4, 1, "", "GPT2_INPUTS_DOCSTRING"], [42, 4, 1, "", "GPT2_PRETRAINED_MODEL_ARCHIVE_LIST"], [42, 4, 1, "", "GPT2_START_DOCSTRING"], [42, 1, 1, "", "MLP"], [42, 4, 1, "", "PARALLELIZE_DOCSTRING"], [42, 4, 1, "", "_CONFIG_FOR_DOC"], [42, 4, 1, "", "_TOKENIZER_FOR_DOC"], [42, 5, 1, "", "load_tf_weights_in_gpt2"], [42, 4, 1, "", "logger"]], "trajectory_gpt2.AdapterMLP": [[42, 3, 1, "", "forward"]], "trajectory_gpt2.Attention": [[42, 3, 1, "", "_attn"], [42, 3, 1, "", "forward"], [42, 3, 1, "", "merge_heads"], [42, 3, 1, "", "prune_heads"], [42, 3, 1, "", "split_heads"]], "trajectory_gpt2.Block": [[42, 3, 1, "", "forward"]], "trajectory_gpt2.GPT2DoubleHeadsModelOutput": [[42, 2, 1, "", "attentions"], [42, 2, 1, "", "hidden_states"], [42, 2, 1, "", "logits"], [42, 2, 1, "", "loss"], [42, 2, 1, "", "mc_logits"], [42, 2, 1, "", "mc_loss"], [42, 2, 1, "", "past_key_values"]], "trajectory_gpt2.GPT2Model": [[42, 3, 1, "", "_prune_heads"], [42, 3, 1, "", "deparallelize"], [42, 3, 1, "", "forward"], [42, 3, 1, "", "get_input_embeddings"], [42, 3, 1, "", "parallelize"], [42, 3, 1, "", "set_input_embeddings"], [42, 3, 1, "", "set_layers"]], "trajectory_gpt2.GPT2PreTrainedModel": [[42, 3, 1, "", "_init_weights"], [42, 2, 1, "", "base_model_prefix"], [42, 2, 1, "", "config_class"], [42, 2, 1, "", "load_tf_weights"]], "trajectory_gpt2.MLP": [[42, 3, 1, "", "forward"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:data", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"]}, "titleterms": {"welcom": 43, "ev2gym": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 43], "": 43, "document": 43, "indic": 43, "tabl": 43, "rl_agent": [22, 23, 24], "reward": 23, "modul": [0, 1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42], "content": [0, 1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43], "function": [4, 6, 7, 23, 24, 25, 27, 28, 29, 32, 34, 42], "state": 24, "api": 35, "refer": 35, "util": [25, 26, 27, 28], "arg_pars": 25, "loader": 27, "v2gprofitmax": 0, "class": [0, 1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 33, 36, 37, 38, 39, 40, 41, 42], "act_train": 1, "decision_transform": 2, "empc": 3, "baselin": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], "ddpg": [4, 5, 6, 7, 8], "attribut": [4, 6, 8, 18, 29, 33, 42], "net": 6, "nois": 7, "replay_memori": 8, "dt": 9, "gurobi_model": [10, 11, 12], "profit_max": 11, "tracking_error": 12, "heurist": 13, "subpackag": [14, 31], "visual": [29, 30, 31, 32, 33], "evaluator_plot": 29, "icon": 30, "plot": 32, "render": 33, "evaluate_episod": 34, "mlp_bc": 36, "model": [15, 16, 17, 18, 19, 20, 21, 37], "mpc": 38, "ocmf_mpc": 39, "seq_train": 40, "trainer": 41, "trajectory_gpt2": 42, "ev": 15, "ev2gym_env": 16, "author": [16, 17], "stavro": [16, 17], "orfanoudaki": [16, 17], "2023": [16, 17], "ev_charg": 17, "grid": 18, "replai": 20, "transform": 21}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"V2GProfitMax": [[0, "module-V2GProfitMax"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [20, "module-contents"], [21, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"]], "Classes": [[0, "classes"], [1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [20, "classes"], [21, "classes"], [33, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"]], "act_trainer": [[1, "module-act_trainer"]], "decision_transformer": [[2, "module-decision_transformer"]], "eMPC": [[3, "module-eMPC"]], "ev2gym.baselines.DDPG.ddpg": [[4, "module-ev2gym.baselines.DDPG.ddpg"]], "Functions": [[4, "functions"], [6, "functions"], [7, "functions"], [23, "functions"], [24, "functions"], [25, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [32, "functions"], [34, "functions"], [42, "functions"]], "Attributes": [[4, "attributes"], [6, "attributes"], [8, "attributes"], [18, "attributes"], [29, "attributes"], [33, "attributes"], [42, "attributes"]], "ev2gym.baselines.DDPG": [[5, "module-ev2gym.baselines.DDPG"]], "ev2gym.baselines.DDPG.nets": [[6, "module-ev2gym.baselines.DDPG.nets"]], "ev2gym.baselines.DDPG.noise": [[7, "module-ev2gym.baselines.DDPG.noise"]], "ev2gym.baselines.DDPG.replay_memory": [[8, "module-ev2gym.baselines.DDPG.replay_memory"]], "ev2gym.baselines.DT": [[9, "module-ev2gym.baselines.DT"]], "ev2gym.baselines.gurobi_models": [[10, "module-ev2gym.baselines.gurobi_models"]], "ev2gym.baselines.gurobi_models.profit_max": [[11, "module-ev2gym.baselines.gurobi_models.profit_max"]], "ev2gym.baselines.gurobi_models.tracking_error": [[12, "module-ev2gym.baselines.gurobi_models.tracking_error"]], "ev2gym.baselines.heuristics": [[13, "module-ev2gym.baselines.heuristics"]], "ev2gym.baselines": [[14, "module-ev2gym.baselines"]], "Subpackages": [[14, "subpackages"], [31, "subpackages"]], "ev2gym.models.ev": [[15, "module-ev2gym.models.ev"]], "ev2gym.models.ev2gym_env": [[16, "module-ev2gym.models.ev2gym_env"]], "Author: Stavros Orfanoudakis 2023": [[16, "author-stavros-orfanoudakis-2023"], [17, "author-stavros-orfanoudakis-2023"]], "ev2gym.models.ev_charger": [[17, "module-ev2gym.models.ev_charger"]], "ev2gym.models.grid": [[18, "module-ev2gym.models.grid"]], "ev2gym.models": [[19, "module-ev2gym.models"]], "ev2gym.models.replay": [[20, "module-ev2gym.models.replay"]], "ev2gym.models.transformer": [[21, "module-ev2gym.models.transformer"]], "ev2gym.rl_agent": [[22, "module-ev2gym.rl_agent"]], "ev2gym.rl_agent.reward": [[23, "module-ev2gym.rl_agent.reward"]], "ev2gym.rl_agent.state": [[24, "module-ev2gym.rl_agent.state"]], "ev2gym.utilities.arg_parser": [[25, "module-ev2gym.utilities.arg_parser"]], "ev2gym.utilities": [[26, "module-ev2gym.utilities"]], "ev2gym.utilities.loaders": [[27, "module-ev2gym.utilities.loaders"]], "ev2gym.utilities.utils": [[28, "module-ev2gym.utilities.utils"]], "ev2gym.visuals.evaluator_plot": [[29, "module-ev2gym.visuals.evaluator_plot"]], "ev2gym.visuals.icons": [[30, "module-ev2gym.visuals.icons"]], "ev2gym.visuals": [[31, "module-ev2gym.visuals"]], "ev2gym.visuals.plots": [[32, "module-ev2gym.visuals.plots"]], "ev2gym.visuals.render": [[33, "module-ev2gym.visuals.render"]], "evaluate_episodes": [[34, "module-evaluate_episodes"]], "API Reference": [[35, "api-reference"]], "mlp_bc": [[36, "module-mlp_bc"]], "model": [[37, "module-model"]], "mpc": [[38, "module-mpc"]], "ocmf_mpc": [[39, "module-ocmf_mpc"]], "seq_trainer": [[40, "module-seq_trainer"]], "trainer": [[41, "module-trainer"]], "trajectory_gpt2": [[42, "module-trajectory_gpt2"]], "Welcome to ev2gym's documentation!": [[43, "welcome-to-ev2gym-s-documentation"]], "Contents:": [[43, null]], "Indices and tables": [[43, "indices-and-tables"]]}, "indexentries": {"v2gprofitmax": [[0, "module-V2GProfitMax"]], "v2gprofitmaxloadsoracle (class in v2gprofitmax)": [[0, "V2GProfitMax.V2GProfitMaxLoadsOracle"]], "v2gprofitmaxoracle (class in v2gprofitmax)": [[0, "V2GProfitMax.V2GProfitMaxOracle"]], "algo_name (v2gprofitmax.v2gprofitmaxloadsoracle attribute)": [[0, "V2GProfitMax.V2GProfitMaxLoadsOracle.algo_name"]], "algo_name (v2gprofitmax.v2gprofitmaxoracle attribute)": [[0, "V2GProfitMax.V2GProfitMaxOracle.algo_name"]], "get_action() (v2gprofitmax.v2gprofitmaxloadsoracle method)": [[0, "V2GProfitMax.V2GProfitMaxLoadsOracle.get_action"]], "get_action() (v2gprofitmax.v2gprofitmaxoracle method)": [[0, "V2GProfitMax.V2GProfitMaxOracle.get_action"]], "module": [[0, "module-V2GProfitMax"], [1, "module-act_trainer"], [2, "module-decision_transformer"], [3, "module-eMPC"], [4, "module-ev2gym.baselines.DDPG.ddpg"], [5, "module-ev2gym.baselines.DDPG"], [6, "module-ev2gym.baselines.DDPG.nets"], [7, "module-ev2gym.baselines.DDPG.noise"], [8, "module-ev2gym.baselines.DDPG.replay_memory"], [9, "module-ev2gym.baselines.DT"], [10, "module-ev2gym.baselines.gurobi_models"], [11, "module-ev2gym.baselines.gurobi_models.profit_max"], [12, "module-ev2gym.baselines.gurobi_models.tracking_error"], [13, "module-ev2gym.baselines.heuristics"], [14, "module-ev2gym.baselines"], [15, "module-ev2gym.models.ev"], [16, "module-ev2gym.models.ev2gym_env"], [17, "module-ev2gym.models.ev_charger"], [18, "module-ev2gym.models.grid"], [19, "module-ev2gym.models"], [20, "module-ev2gym.models.replay"], [21, "module-ev2gym.models.transformer"], [22, "module-ev2gym.rl_agent"], [23, "module-ev2gym.rl_agent.reward"], [24, "module-ev2gym.rl_agent.state"], [25, "module-ev2gym.utilities.arg_parser"], [26, "module-ev2gym.utilities"], [27, "module-ev2gym.utilities.loaders"], [28, "module-ev2gym.utilities.utils"], [29, "module-ev2gym.visuals.evaluator_plot"], [30, "module-ev2gym.visuals.icons"], [31, "module-ev2gym.visuals"], [32, "module-ev2gym.visuals.plots"], [33, "module-ev2gym.visuals.render"], [34, "module-evaluate_episodes"], [36, "module-mlp_bc"], [37, "module-model"], [38, "module-mpc"], [39, "module-ocmf_mpc"], [40, "module-seq_trainer"], [41, "module-trainer"], [42, "module-trajectory_gpt2"]], "acttrainer (class in act_trainer)": [[1, "act_trainer.ActTrainer"]], "act_trainer": [[1, "module-act_trainer"]], "train_step() (act_trainer.acttrainer method)": [[1, "act_trainer.ActTrainer.train_step"]], "decisiontransformer (class in decision_transformer)": [[2, "decision_transformer.DecisionTransformer"]], "decision_transformer": [[2, "module-decision_transformer"]], "forward() (decision_transformer.decisiontransformer method)": [[2, "decision_transformer.DecisionTransformer.forward"]], "get_action() (decision_transformer.decisiontransformer method)": [[2, "decision_transformer.DecisionTransformer.get_action"]], "empc": [[3, "module-eMPC"]], "empc_g2v (class in empc)": [[3, "eMPC.eMPC_G2V"]], "empc_v2g (class in empc)": [[3, "eMPC.eMPC_V2G"]], "get_action() (empc.empc_g2v method)": [[3, "eMPC.eMPC_G2V.get_action"]], "get_action() (empc.empc_v2g method)": [[3, "eMPC.eMPC_V2G.get_action"]], "ddpg (class in ev2gym.baselines.ddpg.ddpg)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG"]], "calc_action() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.calc_action"]], "device (in module ev2gym.baselines.ddpg.ddpg)": [[4, "ev2gym.baselines.DDPG.ddpg.device"]], "ev2gym.baselines.ddpg.ddpg": [[4, "module-ev2gym.baselines.DDPG.ddpg"]], "get_network() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.get_network"]], "get_path_of_latest_file() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.get_path_of_latest_file"]], "hard_update() (in module ev2gym.baselines.ddpg.ddpg)": [[4, "ev2gym.baselines.DDPG.ddpg.hard_update"]], "load_checkpoint() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.load_checkpoint"]], "logger (in module ev2gym.baselines.ddpg.ddpg)": [[4, "ev2gym.baselines.DDPG.ddpg.logger"]], "save_checkpoint() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.save_checkpoint"]], "set_eval() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.set_eval"]], "set_train() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.set_train"]], "soft_update() (in module ev2gym.baselines.ddpg.ddpg)": [[4, "ev2gym.baselines.DDPG.ddpg.soft_update"]], "update_params() (ev2gym.baselines.ddpg.ddpg.ddpg method)": [[4, "ev2gym.baselines.DDPG.ddpg.DDPG.update_params"]], "ev2gym.baselines.ddpg": [[5, "module-ev2gym.baselines.DDPG"]], "actor (class in ev2gym.baselines.ddpg.nets)": [[6, "ev2gym.baselines.DDPG.nets.Actor"]], "bias_final_init (in module ev2gym.baselines.ddpg.nets)": [[6, "ev2gym.baselines.DDPG.nets.BIAS_FINAL_INIT"]], "critic (class in ev2gym.baselines.ddpg.nets)": [[6, "ev2gym.baselines.DDPG.nets.Critic"]], "weights_final_init (in module ev2gym.baselines.ddpg.nets)": [[6, "ev2gym.baselines.DDPG.nets.WEIGHTS_FINAL_INIT"]], "device (in module ev2gym.baselines.ddpg.nets)": [[6, "ev2gym.baselines.DDPG.nets.device"]], "ev2gym.baselines.ddpg.nets": [[6, "module-ev2gym.baselines.DDPG.nets"]], "fan_in_uniform_init() (in module ev2gym.baselines.ddpg.nets)": [[6, "ev2gym.baselines.DDPG.nets.fan_in_uniform_init"]], "forward() (ev2gym.baselines.ddpg.nets.actor method)": [[6, "ev2gym.baselines.DDPG.nets.Actor.forward"]], "forward() (ev2gym.baselines.ddpg.nets.critic method)": [[6, "ev2gym.baselines.DDPG.nets.Critic.forward"]], "adaptiveparamnoisespec (class in ev2gym.baselines.ddpg.noise)": [[7, "ev2gym.baselines.DDPG.noise.AdaptiveParamNoiseSpec"]], "ounoise (class in ev2gym.baselines.ddpg.noise)": [[7, "ev2gym.baselines.DDPG.noise.OUNoise"]], "ornsteinuhlenbeckactionnoise (class in ev2gym.baselines.ddpg.noise)": [[7, "ev2gym.baselines.DDPG.noise.OrnsteinUhlenbeckActionNoise"]], "__repr__() (ev2gym.baselines.ddpg.noise.adaptiveparamnoisespec method)": [[7, "ev2gym.baselines.DDPG.noise.AdaptiveParamNoiseSpec.__repr__"]], "__repr__() (ev2gym.baselines.ddpg.noise.ornsteinuhlenbeckactionnoise method)": [[7, "ev2gym.baselines.DDPG.noise.OrnsteinUhlenbeckActionNoise.__repr__"]], "adapt() (ev2gym.baselines.ddpg.noise.adaptiveparamnoisespec method)": [[7, "ev2gym.baselines.DDPG.noise.AdaptiveParamNoiseSpec.adapt"]], "ddpg_distance_metric() (in module ev2gym.baselines.ddpg.noise)": [[7, "ev2gym.baselines.DDPG.noise.ddpg_distance_metric"]], "ev2gym.baselines.ddpg.noise": [[7, "module-ev2gym.baselines.DDPG.noise"]], "get_stats() (ev2gym.baselines.ddpg.noise.adaptiveparamnoisespec method)": [[7, "ev2gym.baselines.DDPG.noise.AdaptiveParamNoiseSpec.get_stats"]], "noise() (ev2gym.baselines.ddpg.noise.ounoise method)": [[7, "ev2gym.baselines.DDPG.noise.OUNoise.noise"]], "noise() (ev2gym.baselines.ddpg.noise.ornsteinuhlenbeckactionnoise method)": [[7, "ev2gym.baselines.DDPG.noise.OrnsteinUhlenbeckActionNoise.noise"]], "reset() (ev2gym.baselines.ddpg.noise.ounoise method)": [[7, "ev2gym.baselines.DDPG.noise.OUNoise.reset"]], "reset() (ev2gym.baselines.ddpg.noise.ornsteinuhlenbeckactionnoise method)": [[7, "ev2gym.baselines.DDPG.noise.OrnsteinUhlenbeckActionNoise.reset"]], "replaymemory (class in ev2gym.baselines.ddpg.replay_memory)": [[8, "ev2gym.baselines.DDPG.replay_memory.ReplayMemory"]], "transition (in module ev2gym.baselines.ddpg.replay_memory)": [[8, "ev2gym.baselines.DDPG.replay_memory.Transition"]], "__len__() (ev2gym.baselines.ddpg.replay_memory.replaymemory method)": [[8, "ev2gym.baselines.DDPG.replay_memory.ReplayMemory.__len__"]], "ev2gym.baselines.ddpg.replay_memory": [[8, "module-ev2gym.baselines.DDPG.replay_memory"]], "push() (ev2gym.baselines.ddpg.replay_memory.replaymemory method)": [[8, "ev2gym.baselines.DDPG.replay_memory.ReplayMemory.push"]], "sample() (ev2gym.baselines.ddpg.replay_memory.replaymemory method)": [[8, "ev2gym.baselines.DDPG.replay_memory.ReplayMemory.sample"]], "ev2gym.baselines.dt": [[9, "module-ev2gym.baselines.DT"]], "ev2gym.baselines.gurobi_models": [[10, "module-ev2gym.baselines.gurobi_models"]], "v2gprofitmaxoraclegb (class in ev2gym.baselines.gurobi_models.profit_max)": [[11, "ev2gym.baselines.gurobi_models.profit_max.V2GProfitMaxOracleGB"]], "algo_name (ev2gym.baselines.gurobi_models.profit_max.v2gprofitmaxoraclegb attribute)": [[11, "ev2gym.baselines.gurobi_models.profit_max.V2GProfitMaxOracleGB.algo_name"]], "ev2gym.baselines.gurobi_models.profit_max": [[11, "module-ev2gym.baselines.gurobi_models.profit_max"]], "get_action() (ev2gym.baselines.gurobi_models.profit_max.v2gprofitmaxoraclegb method)": [[11, "ev2gym.baselines.gurobi_models.profit_max.V2GProfitMaxOracleGB.get_action"]], "get_actions() (ev2gym.baselines.gurobi_models.profit_max.v2gprofitmaxoraclegb method)": [[11, "ev2gym.baselines.gurobi_models.profit_max.V2GProfitMaxOracleGB.get_actions"]], "powertrackingerrorrmin (class in ev2gym.baselines.gurobi_models.tracking_error)": [[12, "ev2gym.baselines.gurobi_models.tracking_error.PowerTrackingErrorrMin"]], "algo_name (ev2gym.baselines.gurobi_models.tracking_error.powertrackingerrorrmin attribute)": [[12, "ev2gym.baselines.gurobi_models.tracking_error.PowerTrackingErrorrMin.algo_name"]], "ev2gym.baselines.gurobi_models.tracking_error": [[12, "module-ev2gym.baselines.gurobi_models.tracking_error"]], "get_action() (ev2gym.baselines.gurobi_models.tracking_error.powertrackingerrorrmin method)": [[12, "ev2gym.baselines.gurobi_models.tracking_error.PowerTrackingErrorrMin.get_action"]], "get_actions() (ev2gym.baselines.gurobi_models.tracking_error.powertrackingerrorrmin method)": [[12, "ev2gym.baselines.gurobi_models.tracking_error.PowerTrackingErrorrMin.get_actions"]], "chargeasfastaspossible (class in ev2gym.baselines.heuristics)": [[13, "ev2gym.baselines.heuristics.ChargeAsFastAsPossible"]], "chargeasfastaspossibletodesiredcapacity (class in ev2gym.baselines.heuristics)": [[13, "ev2gym.baselines.heuristics.ChargeAsFastAsPossibleToDesiredCapacity"]], "chargeaslateaspossible (class in ev2gym.baselines.heuristics)": [[13, "ev2gym.baselines.heuristics.ChargeAsLateAsPossible"]], "roundrobin (class in ev2gym.baselines.heuristics)": [[13, "ev2gym.baselines.heuristics.RoundRobin"]], "algo_name (ev2gym.baselines.heuristics.chargeasfastaspossible attribute)": [[13, "ev2gym.baselines.heuristics.ChargeAsFastAsPossible.algo_name"]], "algo_name (ev2gym.baselines.heuristics.chargeasfastaspossibletodesiredcapacity attribute)": [[13, "ev2gym.baselines.heuristics.ChargeAsFastAsPossibleToDesiredCapacity.algo_name"]], "algo_name (ev2gym.baselines.heuristics.chargeaslateaspossible attribute)": [[13, "ev2gym.baselines.heuristics.ChargeAsLateAsPossible.algo_name"]], "algo_name (ev2gym.baselines.heuristics.roundrobin attribute)": [[13, "ev2gym.baselines.heuristics.RoundRobin.algo_name"]], "ev2gym.baselines.heuristics": [[13, "module-ev2gym.baselines.heuristics"]], "get_action() (ev2gym.baselines.heuristics.chargeasfastaspossible method)": [[13, "ev2gym.baselines.heuristics.ChargeAsFastAsPossible.get_action"]], "get_action() (ev2gym.baselines.heuristics.chargeasfastaspossibletodesiredcapacity method)": [[13, "ev2gym.baselines.heuristics.ChargeAsFastAsPossibleToDesiredCapacity.get_action"]], "get_action() (ev2gym.baselines.heuristics.chargeaslateaspossible method)": [[13, "ev2gym.baselines.heuristics.ChargeAsLateAsPossible.get_action"]], "get_action() (ev2gym.baselines.heuristics.roundrobin method)": [[13, "ev2gym.baselines.heuristics.RoundRobin.get_action"]], "get_env() (ev2gym.baselines.heuristics.roundrobin method)": [[13, "ev2gym.baselines.heuristics.RoundRobin.get_env"]], "update_ev_buffer() (ev2gym.baselines.heuristics.chargeaslateaspossible method)": [[13, "ev2gym.baselines.heuristics.ChargeAsLateAsPossible.update_ev_buffer"]], "update_ev_buffer() (ev2gym.baselines.heuristics.roundrobin method)": [[13, "ev2gym.baselines.heuristics.RoundRobin.update_ev_buffer"]], "ev2gym.baselines": [[14, "module-ev2gym.baselines"]], "ev (class in ev2gym.models.ev)": [[15, "ev2gym.models.ev.EV"]], "__str__() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.__str__"]], "_charge() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV._charge"]], "_discharge() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV._discharge"]], "ev2gym.models.ev": [[15, "module-ev2gym.models.ev"]], "get_battery_degradation() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.get_battery_degradation"]], "get_soc() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.get_soc"]], "get_user_satisfaction() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.get_user_satisfaction"]], "is_departing() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.is_departing"]], "my_ceil() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.my_ceil"]], "reset() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.reset"]], "step() (ev2gym.models.ev.ev method)": [[15, "ev2gym.models.ev.EV.step"]], "ev2gym (class in ev2gym.models.ev2gym_env)": [[16, "ev2gym.models.ev2gym_env.EV2Gym"]], "_calculate_reward() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym._calculate_reward"]], "_check_termination() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym._check_termination"]], "_get_observation() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym._get_observation"]], "_save_sim_replay() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym._save_sim_replay"]], "_step_date() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym._step_date"]], "_update_power_statistics() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym._update_power_statistics"]], "ev2gym.models.ev2gym_env": [[16, "module-ev2gym.models.ev2gym_env"]], "init_statistic_variables() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym.init_statistic_variables"]], "render() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym.render"]], "reset() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym.reset"]], "set_reward_function() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym.set_reward_function"]], "step() (ev2gym.models.ev2gym_env.ev2gym method)": [[16, "ev2gym.models.ev2gym_env.EV2Gym.step"]], "ev_charger (class in ev2gym.models.ev_charger)": [[17, "ev2gym.models.ev_charger.EV_Charger"]], "__str__() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.__str__"]], "ev2gym.models.ev_charger": [[17, "module-ev2gym.models.ev_charger"]], "get_avg_user_satisfaction() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.get_avg_user_satisfaction"]], "get_max_power() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.get_max_power"]], "get_min_charge_power() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.get_min_charge_power"]], "get_min_power() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.get_min_power"]], "reset() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.reset"]], "spawn_ev() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.spawn_ev"]], "step() (ev2gym.models.ev_charger.ev_charger method)": [[17, "ev2gym.models.ev_charger.EV_Charger.step"]], "grid (class in ev2gym.models.grid)": [[18, "ev2gym.models.grid.Grid"]], "_get_grid_actions() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid._get_grid_actions"]], "ev2gym.models.grid": [[18, "module-ev2gym.models.grid"]], "get_bus_transformers() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.get_bus_transformers"]], "get_charging_stations_buses() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.get_charging_stations_buses"]], "get_grid_state() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.get_grid_state"]], "get_overloaded_lines() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.get_overloaded_lines"]], "get_overloaded_trafos() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.get_overloaded_trafos"]], "grid (in module ev2gym.models.grid)": [[18, "ev2gym.models.grid.grid"]], "step() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.step"]], "visualize_pf() (ev2gym.models.grid.grid method)": [[18, "ev2gym.models.grid.Grid.visualize_pf"]], "ev2gym.models": [[19, "module-ev2gym.models"]], "evcityreplay (class in ev2gym.models.replay)": [[20, "ev2gym.models.replay.EvCityReplay"]], "ev2gym.models.replay": [[20, "module-ev2gym.models.replay"]], "transformer (class in ev2gym.models.transformer)": [[21, "ev2gym.models.transformer.Transformer"]], "__str__() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.__str__"]], "ev2gym.models.transformer": [[21, "module-ev2gym.models.transformer"]], "generate_demand_response_events() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.generate_demand_response_events"]], "generate_inflexible_loads_forecast() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.generate_inflexible_loads_forecast"]], "generate_pv_generation_forecast() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.generate_pv_generation_forecast"]], "get_how_overloaded() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.get_how_overloaded"]], "get_load_pv_forecast() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.get_load_pv_forecast"]], "get_power_limits() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.get_power_limits"]], "is_overloaded() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.is_overloaded"]], "normalize_inflexible_loads() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.normalize_inflexible_loads"]], "normalize_pv_generation() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.normalize_pv_generation"]], "reset() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.reset"]], "step() (ev2gym.models.transformer.transformer method)": [[21, "ev2gym.models.transformer.Transformer.step"]], "ev2gym.rl_agent": [[22, "module-ev2gym.rl_agent"]], "minimizetrackersurpluswithchargerewards() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.MinimizeTrackerSurplusWithChargeRewards"]], "profitmax_trpenalty_userincentives() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.ProfitMax_TrPenalty_UserIncentives"]], "simplereward() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.SimpleReward"]], "sqtrerror_trpenalty_userincentives() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.SqTrError_TrPenalty_UserIncentives"]], "squaredtrackingerrorreward() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.SquaredTrackingErrorReward"]], "squaredtrackingerrorrewardwithpenalty() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.SquaredTrackingErrorRewardWithPenalty"]], "ev2gym.rl_agent.reward": [[23, "module-ev2gym.rl_agent.reward"]], "profit_maximization() (in module ev2gym.rl_agent.reward)": [[23, "ev2gym.rl_agent.reward.profit_maximization"]], "businesspstwithmoreknowledge() (in module ev2gym.rl_agent.state)": [[24, "ev2gym.rl_agent.state.BusinessPSTwithMoreKnowledge"]], "publicpst() (in module ev2gym.rl_agent.state)": [[24, "ev2gym.rl_agent.state.PublicPST"]], "v2g_profit_max() (in module ev2gym.rl_agent.state)": [[24, "ev2gym.rl_agent.state.V2G_profit_max"]], "v2g_profit_max_loads() (in module ev2gym.rl_agent.state)": [[24, "ev2gym.rl_agent.state.V2G_profit_max_loads"]], "ev2gym.rl_agent.state": [[24, "module-ev2gym.rl_agent.state"]], "arg_parser() (in module ev2gym.utilities.arg_parser)": [[25, "ev2gym.utilities.arg_parser.arg_parser"]], "ev2gym.utilities.arg_parser": [[25, "module-ev2gym.utilities.arg_parser"]], "ev2gym.utilities": [[26, "module-ev2gym.utilities"]], "ev2gym.utilities.loaders": [[27, "module-ev2gym.utilities.loaders"]], "generate_pv_generation() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.generate_pv_generation"]], "generate_residential_inflexible_loads() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.generate_residential_inflexible_loads"]], "load_electricity_prices() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.load_electricity_prices"]], "load_ev_charger_profiles() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.load_ev_charger_profiles"]], "load_ev_profiles() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.load_ev_profiles"]], "load_ev_spawn_scenarios() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.load_ev_spawn_scenarios"]], "load_power_setpoints() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.load_power_setpoints"]], "load_transformers() (in module ev2gym.utilities.loaders)": [[27, "ev2gym.utilities.loaders.load_transformers"]], "ev_spawner() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.EV_spawner"]], "calculate_charge_power_potential() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.calculate_charge_power_potential"]], "ev2gym.utilities.utils": [[28, "module-ev2gym.utilities.utils"]], "generate_power_setpoints() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.generate_power_setpoints"]], "get_statistics() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.get_statistics"]], "median_smoothing() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.median_smoothing"]], "print_statistics() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.print_statistics"]], "smooth_vector() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.smooth_vector"]], "spawn_single_ev() (in module ev2gym.utilities.utils)": [[28, "ev2gym.utilities.utils.spawn_single_EV"]], "algorithm_names (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.algorithm_names"]], "color_list (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.color_list"]], "ev2gym.visuals.evaluator_plot": [[29, "module-ev2gym.visuals.evaluator_plot"]], "marker_list (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.marker_list"]], "plot_actual_power_vs_setpoint() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_actual_power_vs_setpoint"]], "plot_comparable_cs_power() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_comparable_CS_Power"]], "plot_comparable_ev_soc() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_comparable_EV_SoC"]], "plot_comparable_ev_soc_single() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_comparable_EV_SoC_single"]], "plot_prices() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_prices"]], "plot_total_power() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_total_power"]], "plot_total_power_v2g() (in module ev2gym.visuals.evaluator_plot)": [[29, "ev2gym.visuals.evaluator_plot.plot_total_power_V2G"]], "ev2gym.visuals.icons": [[30, "module-ev2gym.visuals.icons"]], "ev2gym.visuals": [[31, "module-ev2gym.visuals"]], "ev2gym.visuals.plots": [[32, "module-ev2gym.visuals.plots"]], "ev_city_plot() (in module ev2gym.visuals.plots)": [[32, "ev2gym.visuals.plots.ev_city_plot"]], "visualize_step() (in module ev2gym.visuals.plots)": [[32, "ev2gym.visuals.plots.visualize_step"]], "renderer (class in ev2gym.visuals.render)": [[33, "ev2gym.visuals.render.Renderer"]], "ev2gym.visuals.render": [[33, "module-ev2gym.visuals.render"]], "icons (in module ev2gym.visuals.render)": [[33, "ev2gym.visuals.render.icons"]], "render() (ev2gym.visuals.render.renderer method)": [[33, "ev2gym.visuals.render.Renderer.render"]], "evaluate_episode() (in module evaluate_episodes)": [[34, "evaluate_episodes.evaluate_episode"]], "evaluate_episode_rtg() (in module evaluate_episodes)": [[34, "evaluate_episodes.evaluate_episode_rtg"]], "evaluate_episodes": [[34, "module-evaluate_episodes"]], "mlpbcmodel (class in mlp_bc)": [[36, "mlp_bc.MLPBCModel"]], "forward() (mlp_bc.mlpbcmodel method)": [[36, "mlp_bc.MLPBCModel.forward"]], "get_action() (mlp_bc.mlpbcmodel method)": [[36, "mlp_bc.MLPBCModel.get_action"]], "mlp_bc": [[36, "module-mlp_bc"]], "trajectorymodel (class in model)": [[37, "model.TrajectoryModel"]], "forward() (model.trajectorymodel method)": [[37, "model.TrajectoryModel.forward"]], "get_action() (model.trajectorymodel method)": [[37, "model.TrajectoryModel.get_action"]], "model": [[37, "module-model"]], "mpc (class in mpc)": [[38, "mpc.MPC"]], "calculate_inequalityconstraints() (mpc.mpc method)": [[38, "mpc.MPC.calculate_InequalityConstraints"]], "calculate_xf_g2v() (mpc.mpc method)": [[38, "mpc.MPC.calculate_XF_G2V"]], "calculate_xf_v2g() (mpc.mpc method)": [[38, "mpc.MPC.calculate_XF_V2G"]], "g2v_station_models() (mpc.mpc method)": [[38, "mpc.MPC.g2v_station_models"]], "get_action() (mpc.mpc method)": [[38, "mpc.MPC.get_action"]], "mpc": [[38, "module-mpc"]], "print_info() (mpc.mpc method)": [[38, "mpc.MPC.print_info"]], "reconstruct_state() (mpc.mpc method)": [[38, "mpc.MPC.reconstruct_state"]], "set_power_limits_g2v() (mpc.mpc method)": [[38, "mpc.MPC.set_power_limits_G2V"]], "set_power_limits_v2g() (mpc.mpc method)": [[38, "mpc.MPC.set_power_limits_V2G"]], "update_tr_power() (mpc.mpc method)": [[38, "mpc.MPC.update_tr_power"]], "update_tr_power_oracle() (mpc.mpc method)": [[38, "mpc.MPC.update_tr_power_oracle"]], "v2g_station_models() (mpc.mpc method)": [[38, "mpc.MPC.v2g_station_models"]], "ocmf_g2v (class in ocmf_mpc)": [[39, "ocmf_mpc.OCMF_G2V"]], "ocmf_v2g (class in ocmf_mpc)": [[39, "ocmf_mpc.OCMF_V2G"]], "get_action() (ocmf_mpc.ocmf_g2v method)": [[39, "ocmf_mpc.OCMF_G2V.get_action"]], "get_action() (ocmf_mpc.ocmf_v2g method)": [[39, "ocmf_mpc.OCMF_V2G.get_action"]], "ocmf_mpc": [[39, "module-ocmf_mpc"]], "sequencetrainer (class in seq_trainer)": [[40, "seq_trainer.SequenceTrainer"]], "seq_trainer": [[40, "module-seq_trainer"]], "train_step() (seq_trainer.sequencetrainer method)": [[40, "seq_trainer.SequenceTrainer.train_step"]], "trainer (class in trainer)": [[41, "trainer.Trainer"]], "train_iteration() (trainer.trainer method)": [[41, "trainer.Trainer.train_iteration"]], "train_step() (trainer.trainer method)": [[41, "trainer.Trainer.train_step"]], "trainer": [[41, "module-trainer"]], "adaptermlp (class in trajectory_gpt2)": [[42, "trajectory_gpt2.AdapterMLP"]], "attention (class in trajectory_gpt2)": [[42, "trajectory_gpt2.Attention"]], "block (class in trajectory_gpt2)": [[42, "trajectory_gpt2.Block"]], "deparallelize_docstring (in module trajectory_gpt2)": [[42, "trajectory_gpt2.DEPARALLELIZE_DOCSTRING"]], "gpt2doubleheadsmodeloutput (class in trajectory_gpt2)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput"]], "gpt2model (class in trajectory_gpt2)": [[42, "trajectory_gpt2.GPT2Model"]], "gpt2pretrainedmodel (class in trajectory_gpt2)": [[42, "trajectory_gpt2.GPT2PreTrainedModel"]], "gpt2_inputs_docstring (in module trajectory_gpt2)": [[42, "trajectory_gpt2.GPT2_INPUTS_DOCSTRING"]], "gpt2_pretrained_model_archive_list (in module trajectory_gpt2)": [[42, "trajectory_gpt2.GPT2_PRETRAINED_MODEL_ARCHIVE_LIST"]], "gpt2_start_docstring (in module trajectory_gpt2)": [[42, "trajectory_gpt2.GPT2_START_DOCSTRING"]], "mlp (class in trajectory_gpt2)": [[42, "trajectory_gpt2.MLP"]], "parallelize_docstring (in module trajectory_gpt2)": [[42, "trajectory_gpt2.PARALLELIZE_DOCSTRING"]], "_config_for_doc (in module trajectory_gpt2)": [[42, "trajectory_gpt2._CONFIG_FOR_DOC"]], "_tokenizer_for_doc (in module trajectory_gpt2)": [[42, "trajectory_gpt2._TOKENIZER_FOR_DOC"]], "_attn() (trajectory_gpt2.attention method)": [[42, "trajectory_gpt2.Attention._attn"]], "_init_weights() (trajectory_gpt2.gpt2pretrainedmodel method)": [[42, "trajectory_gpt2.GPT2PreTrainedModel._init_weights"]], "_prune_heads() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model._prune_heads"]], "attentions (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.attentions"]], "base_model_prefix (trajectory_gpt2.gpt2pretrainedmodel attribute)": [[42, "trajectory_gpt2.GPT2PreTrainedModel.base_model_prefix"]], "config_class (trajectory_gpt2.gpt2pretrainedmodel attribute)": [[42, "trajectory_gpt2.GPT2PreTrainedModel.config_class"]], "deparallelize() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model.deparallelize"]], "forward() (trajectory_gpt2.adaptermlp method)": [[42, "trajectory_gpt2.AdapterMLP.forward"]], "forward() (trajectory_gpt2.attention method)": [[42, "trajectory_gpt2.Attention.forward"]], "forward() (trajectory_gpt2.block method)": [[42, "trajectory_gpt2.Block.forward"]], "forward() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model.forward"]], "forward() (trajectory_gpt2.mlp method)": [[42, "trajectory_gpt2.MLP.forward"]], "get_input_embeddings() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model.get_input_embeddings"]], "hidden_states (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.hidden_states"]], "load_tf_weights (trajectory_gpt2.gpt2pretrainedmodel attribute)": [[42, "trajectory_gpt2.GPT2PreTrainedModel.load_tf_weights"]], "load_tf_weights_in_gpt2() (in module trajectory_gpt2)": [[42, "trajectory_gpt2.load_tf_weights_in_gpt2"]], "logger (in module trajectory_gpt2)": [[42, "trajectory_gpt2.logger"]], "logits (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.logits"]], "loss (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.loss"]], "mc_logits (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.mc_logits"]], "mc_loss (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.mc_loss"]], "merge_heads() (trajectory_gpt2.attention method)": [[42, "trajectory_gpt2.Attention.merge_heads"]], "parallelize() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model.parallelize"]], "past_key_values (trajectory_gpt2.gpt2doubleheadsmodeloutput attribute)": [[42, "trajectory_gpt2.GPT2DoubleHeadsModelOutput.past_key_values"]], "prune_heads() (trajectory_gpt2.attention method)": [[42, "trajectory_gpt2.Attention.prune_heads"]], "set_input_embeddings() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model.set_input_embeddings"]], "set_layers() (trajectory_gpt2.gpt2model method)": [[42, "trajectory_gpt2.GPT2Model.set_layers"]], "split_heads() (trajectory_gpt2.attention method)": [[42, "trajectory_gpt2.Attention.split_heads"]], "trajectory_gpt2": [[42, "module-trajectory_gpt2"]]}})